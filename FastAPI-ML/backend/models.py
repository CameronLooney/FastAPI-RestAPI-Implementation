from sqlalchemy import Table, Column, Integer, DateTime, String, Text, MetaData, ForeignKey, create_engine, UniqueConstraint, Index
from datetime import datetime
from typing import Optional, List

from pydantic import BaseModel, Field
from datetime import datetime




# class PostBase is the base class for Post and Comment
class PostBase(BaseModel): 
    title: str # title is a required field
    content: str # content is a required field
    publication_date: datetime = Field(default_factory=datetime.now) # publication_date is a required field
    #Field is a pydantic field that allows us to set default values for fields
    # What is Field? https://pydantic-docs.helpmanual.io/usage/fields/
    # Config is a class that holds the configuration for a model
    class Config:
        orm_mode = True # this tells pydantic to use the ORM to validate the model
        orm_mode = True

# class PostPartialUpdate is the base class for partial update of Post
class PostPartialUpdate(BaseModel):
    title: Optional[str] = None # Optional means that the field is not required (but if its provided, it must be a string)
    content: Optional[str] = None # Optional means that the field is not required (but if its provided, it must be a string)


class PostCreate(PostBase):
    pass

# 
class PostDB(PostBase):
    id: int # id is the primary key of the table and it is automatically generated by the database


metadata = MetaData() #MetaData is a class that holds all the tables and other data structures that define the database structure
# Table is a class that defines a table in the database
# the first argument is the name of the table, the next is the medata object that this table belongs to, 
# and the last is a list of Column objects that define the columns in the table


# Column is a class that defines a column in a table
# Integer is a class that defines an integer column
# DateTime is a class that defines a datetime column
# String is a class that defines a string column
# Text is a class that defines a text column
# MetaData is a class that defines the database structure
posts = Table(
    "posts",
    metadata,
    Column("id", Integer, primary_key=True, autoincrement=True), # primary key, autoincrement
    Column("publication_date", DateTime(), nullable=False), # not nullable 
    Column("title", String(length=255), nullable=False), #title is not nullable
    Column("content", Text(), nullable=False), # content is not nullable
)



# CommentBase is the base class for Comment
class CommentBase(BaseModel):
    post_id: int # post_id is a required field
    publication_date: datetime = Field(default_factory=datetime.now) # publication_date is a required field
    content: str # content is a required field

class CommentCreate(CommentBase):
    pass # CommentCreate is the base class for CommentCreate


class CommentDB(CommentBase):
    id: int # id is the primary key of the table and it is automatically generated by the database



# use this model when getting a single post to serialize the comments along with the post data.
class PostPublic(PostDB):
    comments: List[CommentDB] # comments is a list of CommentDB objects
    # get the comments of a post in a single request




# comments is a table that holds all the comments for a post
# post_id is the foreign key that links the comment to the post
comments = Table("comments",metadata,
    Column("id", Integer, primary_key=True, autoincrement=True),
    Column("post_id", ForeignKey("posts.id", ondelete="CASCADE"), nullable=False),
    Column("publication_date", DateTime(), nullable=False),
    Column("content", Text(), nullable=False)
)



'''
Tortoise model for your entity. This is a Python class whose attributes represent the columns of your table. 
This class will provide you static methods in which to perform queries, such as retrieving or creating data. 
Moreover, the actual entities of your database will be instances of this class, giving you access to its data 
like any other object. The role of Tortoise is to make the link between this Python object and the row in the database.
'''
from tortoise.models import Model
from tortoise import fields
class PostTortoise(Model): # PostTortoise is the class that defines the Post table in the database
    '''
    Each field (or column) is an instance of a class corresponding to the type of the field. 
    '''
    id = fields.IntField(pk=True, generated=True) # id is the primary key of the table and it is automatically generated by the database
    publication_date = fields.DatetimeField(null=False) # publication_date is a required field
    title = fields.CharField(max_length=255, null=False) # title is a required field
    content = fields.TextField(null=False) # content is a required field
    # Meta class is a class that holds all the tables and other data structures that define the database structure
    class Meta:
        table = "posts" # table is the name of the table in the database
        table = "posts"